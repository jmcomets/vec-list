#ifndef VEC_LIST_H
#define VEC_LIST_H

#include <cassert>
#include <iterator>
#include <optional>
#include <vector>

template <typename T>
class vec_list
{
    public:
        typedef T value_type;

        typedef std::size_t size_type;
        typedef std::ptrdiff_t difference_type;

        typedef value_type& reference;
        typedef const value_type& const_reference;

        typedef value_type* pointer;
        typedef const value_type* const_pointer;

    private:
        class address
        {
            static const size_type null = -1;

            public:
                address(size_type val = null):
                    m_val(val)
                {
                }

                address& operator=(size_type val)
                {
                    m_val = val;
                    return *this;
                }

                size_type operator*() const
                {
                    return m_val;
                }

                operator bool() const
                {
                    return m_val != null;
                }

            private:
                size_type m_val;
        };

        struct node_data
        {
            std::optional<T> value;
            address next_addr;
            address prev_addr;
        };

        struct allocated_node
        {
            size_type addr;
            node_data& node;
        };

        template <typename V>
        class partial_it: public std::iterator<
                  std::bidirectional_iterator_tag,
                  V, difference_type, V*, V&>
        {
            typedef partial_it<V> self;
            typedef vec_list<T> parent;

            friend class vec_list;

            public:
                explicit partial_it(parent& ls, address addr = address()):
                    m_parent(&ls),
                    m_addr(addr)
                {
                }

                template <typename U>
                partial_it(const partial_it<U>& other):
                    m_parent(other.m_parent),
                    m_addr(other.m_addr)
                {
                }

                self& operator++()
                {
                    if (m_addr)
                    {
                        const node_data& node = m_parent->m_nodes.at(*m_addr);
                        m_addr = node.next_addr;
                    }
                    return *this;
                }

                self operator++(int)
                {
                    self retval = *this;
                    ++(*this);
                    return retval;
                }

                self& operator--()
                {
                    if (m_addr)
                    {
                        const node_data& node = m_parent->m_nodes.at(*m_addr);
                        m_addr = node.prev_addr;
                    }
                    else
                    {
                        // we're at the end, use the last address
                        m_addr = m_parent->m_last_addr;
                    }
                    return *this;
                }

                self operator--(int)
                {
                    self retval = *this;
                    --(*this);
                    return retval;
                }

                bool operator==(const self& other) const
                {
                    return m_parent == other.m_parent && m_addr == other.m_addr;
                }

                bool operator!=(const self& other) const
                {
                    return !(*this == other);
                }

                V& operator*() const
                {
                    auto& node = m_parent->m_nodes.at(*m_addr);
                    return *node.value;
                }

                V* operator->() const
                {
                    auto& node = m_parent->m_nodes.at(*m_addr);
                    return &node.value;
                }

            private:
                parent* m_parent;
                address m_addr;
        };

    public:
        explicit vec_list():
            m_total_addresses(0)
        {
        }

        vec_list(size_type count, const T& value)
        {
            for (; 0 < count; --count)
            {
                push_back(value);
            }
        }

        explicit vec_list(size_type count):
            vec_list(count, T())
        {
        }

        template <class InputIt>
        vec_list(InputIt first, InputIt last)
        {
            for (; first != last; ++first)
            {
                push_back(*first);
            }
        }

        vec_list(const vec_list& other) = default;
        vec_list(vec_list&& other) = default;

        vec_list& operator=(const vec_list& other) = default;

        vec_list(std::initializer_list<T> init):
            vec_list(init.begin(), init.end())
        {
        }

        typedef partial_it<value_type> iterator;
        typedef partial_it<const value_type> const_iterator;

        typedef std::reverse_iterator<iterator> reverse_iterator;
        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

        // assign - assigns values to the container

        // Appends the given element value to the end of the container.
        //
        // The new element is initialized as a copy of value.
        //
        // No iterators or references are invalidated
        void push_back(const T& value)
        {
            insert(end(), value);
        }

        // Appends the given element value to the end of the container.
        //
        // value is moved into the new element.
        //
        // No iterators or references are invalidated
        void push_back(T&& value)
        {
            insert(end(), std::move(value));
        }

        // Prepends the given element value to the beginning of the container.
        //
        // The new element is initialized as a copy of value.
        //
        // No iterators or references are invalidated.
        void push_front(const T& value)
        {
            insert(begin(), value);
        }

        // Prepends the given element value to the beginning of the container.
        //
        // value is moved into the new element.
        //
        // No iterators or references are invalidated.
        void push_front(T&& value)
        {
            insert(begin(), std::move(value));
        }

        // Removes the first element of the container. If there are no elements
        // in the container, the behavior is undefined.
        //
        // References and iterators to the erased element are invalidated.
        void pop_front()
        {
            erase(begin());
        }

        // Removes the last element of the container.
        //
        // Calling pop_back on an empty container is undefined.
        //
        // References and iterators to the erased element are invalidated.
        void pop_back()
        {
            erase(end());
        }

        // Returns the number of elements in the container, i.e. std::distance(begin(), end()).
        size_type size() const noexcept
        {
            return nb_addresses();
        }

        // Checks if the container has no elements, i.e. whether begin() == end().
        bool empty() const noexcept
        {
            return size() == 0;
        }

        // Returns a reference to the first element in the container.
        //
        // Calling front on an empty container is undefined.
        reference front()
        {
            return *begin();
        }

        // Returns a reference to the first element in the container (const version).
        //
        // Calling front on an empty container is undefined.
        const_reference front() const
        {
            return *cbegin();
        }

        // Returns reference to the last element in the container.
        //
        // Calling back on an empty container is undefined.
        reference back()
        {
            auto tmp = end();
            --tmp;
            return *tmp;
        }

        // Returns reference to the last element in the container (const version).
        //
        // Calling back on an empty container is undefined.
        const_reference back() const
        {
            auto tmp = cend();
            --tmp;
            return *tmp;
        }

        iterator begin()
        {
            return iterator(*this, m_first_addr);
        }

        const_iterator begin() const
        {
            return cbegin();
        }

        const_iterator cbegin() const
        {
            return const_iterator(*this, m_first_addr);
        }

        iterator end()
        {
            return iterator(*this);
        }

        const_iterator end() const
        {
            return cend();
        }

        const_iterator cend() const
        {
            return const_iterator(*this);
        }

        reverse_iterator rbegin()
        {
            return reverse_iterator(begin());
        }

        const_reverse_iterator rbegin() const
        {
            return rcbegin();
        }

        const_reverse_iterator rcbegin() const
        {
            return reverse_iterator(cbegin());
        }

        reverse_iterator rend()
        {
            return reverse_iterator(end());
        }

        const_reverse_iterator rend() const
        {
            return rcend();
        }

        const_reverse_iterator rcend() const
        {
            return reverse_iterator(cend());
        }

        void clear()
        {
            clear_entries();
            m_first_addr = m_last_addr = address();
        }

        // Inserts value before the location pointed to by pos
        //
        // The new element is initialized as a copy of value.
        //
        // No iterators or references are invalidated.
        //
        // Returns an iterator pointing to the inserted value
        iterator insert(const_iterator pos, const T& value)
        {
            allocated_node e = put(value);
            return insert_entry(pos.m_addr, e);
        }

        // Inserts value before the location pointed to by pos
        //
        // value is moved into the new element.
        //
        // No iterators or references are invalidated.
        //
        // Returns an iterator pointing to the inserted value
        iterator insert(const_iterator pos, T&& value)
        {
            allocated_node e = put(std::move(value));
            return insert_entry(pos.m_addr, e);
        }

        // Inserts count copies of the value before the location pointed to by pos.
        //
        // No iterators or references are invalidated.
        //
        // Returns an iterator pointing to the first element inserted, or pos if count==0.
        iterator insert(const_iterator pos, size_type count, const T& value)
        {
            iterator it = pos;
            for (; count > 0; --count)
            {
                it = insert(pos, value);
            }
            return it;
        }

        // Inserts elements from range [first, last) before the location pointed to by pos.
        //
        // The behavior is undefined if first and last are iterators into *this.
        //
        // No iterators or references are invalidated.
        //
        // Returns an iterator pointing to the first element inserted, or pos if first==last.
        template <class InputIt>
        iterator insert(const_iterator pos, InputIt first, InputIt last)
        {
            iterator it = pos;
            for (; first != last; ++first)
            {
                it = insert(pos, *first);
            }
            return it;
        }

        // Inserts elements from initializer list ilist.
        //
        // No iterators or references are invalidated.
        //
        // Returns an iterator pointing to the first element inserted, or pos
        // if ilist is empty.
        iterator insert(const_iterator pos, std::initializer_list<T> ilist)
        {
            return insert(pos, ilist.begin(), ilist.end());
        }

        // Removes the element at pos.
        //
        // References and iterators to the erased elements are invalidated. Other references
        // and iterators are not affected.
        //
        // The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
        // is valid, but is not dereferencable) cannot be used as a value for pos.
        //
        // Returns the iterator following the last removed element.
        iterator erase(const_iterator pos)
        {
            // no address => back
            size_type addr = pos.m_addr ? *pos.m_addr : *m_last_addr;
            const node_data& node = m_nodes.at(addr);

            // invalidate the node's address
            pop(addr);

            // no prev address => begin
            if (!node.prev_addr)
            {
                m_first_addr = node.next_addr;
            }
            else
            {
                node_data& prev_node = m_nodes.at(*node.prev_addr);
                prev_node.next_addr = node.next_addr;
            }

            // no next address => end
            if (!node.next_addr)
            {
                m_last_addr = node.prev_addr;
            }
            else
            {
                node_data& next_node = m_nodes.at(*node.next_addr);
                next_node.prev_addr = node.prev_addr;
            }

            return iterator(*this, node.next_addr);
        }

        // Removes the elements in the range [first; last).
        //
        // References and iterators to the erased elements are invalidated. Other references
        // and iterators are not affected.
        //
        // The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
        // is valid, but is not dereferencable) cannot be used as a value for pos.
        //
        // Returns the iterator following the last removed element.
        iterator erase(const_iterator first, const_iterator last)
        {
            iterator it = first;
            for (; first != last; ++first)
            {
                it = erase(first);
            }
            return it;
        }

        // Modifiers
        // emplace - constructs element in-place
        // emplace_back - constructs an element in-place at the end
        // emplace_front - constructs an element in-place at the beginning
        // resize - changes the number of elements stored
        // swap - swaps the contents
        // Operations
        // merge - merges two sorted lists
        // splice - moves elements from another list
        // remove remove_if - removes elements satisfying specific criteria
        // reverse - reverses the order of the elements
        // unique - removes consecutive duplicate elements
        // sort - sorts the elements

    private:
        iterator insert_entry(address next_addr, allocated_node& a)
        {
            // no next_addr => end
            if (!next_addr)
            {
                if (!m_last_addr)
                {
                    assert(!m_first_addr);
                    m_first_addr = m_last_addr = a.addr;
                }
                else
                {
                    node_data& last_node = m_nodes.at(*m_last_addr);
                    last_node.next_addr = a.addr;
                    a.node.prev_addr = m_last_addr;
                    m_last_addr = a.addr;
                }

                return iterator(*this, m_last_addr);
            }

            auto& next_node = m_nodes.at(*next_addr);

            // no prev address => begin
            if (!next_node.prev_addr)
            {
                if (!m_first_addr)
                {
                    assert(!m_last_addr);
                    m_first_addr = m_last_addr = a.addr;
                }
                else
                {
                    node_data& first_node = m_nodes.at(*m_first_addr);
                    first_node.prev_addr = a.addr;
                    a.node.next_addr = m_first_addr;
                    m_first_addr = a.addr;
                }

                return iterator(*this, m_first_addr);
            }

            size_type prev_addr = *next_node.prev_addr;
            auto& prev_node = m_nodes.at(prev_addr);

            prev_node.next_addr = a.addr;
            next_node.prev_addr = a.addr;
            a.node.prev_addr = prev_addr;
            a.node.next_addr = next_addr;
            return iterator(*this, a.addr);
        }

        allocated_node put(T value)
        {
            // pick an address, re-using available ones
            size_type addr;
            if (m_available_addresses.empty())
            {
                addr = m_total_addresses;
                ++m_total_addresses;
            }
            else
            {
                addr = m_available_addresses.back();
                m_available_addresses.pop_back();
            }

            // resize the vec if needed
            if (addr >= m_nodes.size())
            {
                m_nodes.resize(addr + 1);
            }

            node_data& node = m_nodes.at(addr);
            node.value = value;
            node.next_addr = node.prev_addr = address();
            return { addr, node };
        }

        void pop(size_type addr)
        {
            m_available_addresses.push_back(addr);
        }

        void clear_entries()
        {
            m_nodes.clear();
            m_available_addresses.clear();
            m_total_addresses = 0;
        }

        size_type nb_addresses() const noexcept
        {
            return m_total_addresses - m_available_addresses.size();
        }

    private:
        std::vector<node_data> m_nodes;

        address m_first_addr;
        address m_last_addr;

        std::vector<size_type> m_available_addresses;
        size_type m_total_addresses;
};

template <typename T>
bool operator==(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
bool operator!=(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
bool operator<(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
bool operator<=(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
bool operator>(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
bool operator>=(const vec_list<T>& lhs, const vec_list<T>& rhs);

template <typename T>
void swap(vec_list<T>& lhs, vec_list<T>& rhs);

#endif // VEC_LIST_H

// vim: ft=cpp et sw=4 sts=4
